within wsm_simulations;

model ros_inverted_pendelum_controller
  ros_inverted_pendelum_reward_function ros_inverted_pendelum_reward_function1 annotation(Placement(visible = true, transformation(origin = {145, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression learningRate(y = 0.1) annotation(Placement(visible = true, transformation(origin = {120, -40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression epsilon(y = (1.0 - time / 200000) * 0.05) annotation(Placement(visible = true, transformation(origin = {120, -55}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression discountFactor(y = 0.5) annotation(Placement(visible = true, transformation(origin = {120, -70}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  QTable qTable1(stateDims = 3, saveModel = saveModel, useResetPort = false, loadModel = loadModel, modelURI = "modelica://wsm_simulations/../../pendelum_controller.qtable", savingInterval = savingInterval, useDataPort = true, stateRanges = {{-2, 2}, {-15, 15}, {-3.14159265359, 3.14159265359}}, stateCounts = {9, 17, 23}, actionsCount = 7, actionRange = {-18, 18}) annotation(Placement(visible = true, transformation(origin = {165, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.ROS_Node rOS_Node1(node_name = "inverted_pendelum_controller") annotation(Placement(visible = true, transformation(origin = {-85, 5}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Readers.RealReader velocityReader(path = "velocity") annotation(Placement(visible = true, transformation(origin = {10, 75}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Readers.RealReader angleReader(path = "angle") annotation(Placement(visible = true, transformation(origin = {10, 25}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Readers.RealReader angularVelocityReader(path = "angular_velocity") annotation(Placement(visible = true, transformation(origin = {10, 48.277}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Subscriber subscriber1(topic = "pendelum_state") annotation(Placement(visible = true, transformation(origin = {-30, 25}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Publisher publisher1(topic = "pendelum_motor", msgSitePackageURI = "modelica://wsm_simulations/../../../../devel/lib/site-packages", datatype = "wsm_simulations/PendelumMotor", internalMessagingPolicy = internalMessagingPolicy) annotation(Placement(visible = true, transformation(origin = {-30, -20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Writers.RealWriter motorResponseWriter(path = "motor_response") annotation(Placement(visible = true, transformation(origin = {10, -20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.tinyDelay tinyDelay2 annotation(Placement(visible = true, transformation(origin = {37.5, 10}, extent = {{-2.5, -2.5}, {2.5, 2.5}}, rotation = 0)));
  ROSPlug.tinyDelay tinyDelay3 annotation(Placement(visible = true, transformation(origin = {62.451, 0.024}, extent = {{2.549, -2.549}, {-2.549, 2.549}}, rotation = -270)));
  parameter Boolean training = false "If training should be applied";
  parameter Boolean loadModel = true "qTable1.loadModel";
  parameter Boolean saveModel = false "qTable1.saveModel";
  parameter ROSPlug.Publisher.InternalMessagingPolicy internalMessagingPolicy = ROSPlug.Publisher.InternalMessagingPolicy.Prohibited "If message are sent directly to subscribers within the model without passing through ROS. (publisher1.internalMessagingPolicy)";
  parameter Modelica.SIunits.Time savingInterval(min = 0) = 86000 "How often to save (qTable1.savingInterval)";
  ROSPlug.Readers.RealReader positionReader(path = "position") annotation(Placement(visible = true, transformation(origin = {10, 100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Logical.Switch switch1 annotation(Placement(visible = true, transformation(origin = {150, -45}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
  Modelica.Blocks.Logical.Switch switch2 annotation(Placement(visible = true, transformation(origin = {150, -60}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression notTrainingValue(y = 0) annotation(Placement(visible = true, transformation(origin = {120.5, -25.5}, extent = {{-4.5, -4.5}, {4.5, 4.5}}, rotation = 0)));
  Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y = training) annotation(Placement(visible = true, transformation(origin = {80, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.tinyDelay tinyDelay4 annotation(Placement(visible = true, transformation(origin = {37.319, -60.181}, extent = {{2.681, -2.681}, {-2.681, 2.681}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression timeDelay(y = if internalMessagingPolicy == ROSPlug.Publisher.InternalMessagingPolicy.Only then 0.02 else 0) annotation(Placement(visible = true, transformation(origin = {80, -40}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
  ROSPlug.variableTimeDelay variableTimeDelay1 annotation(Placement(visible = true, transformation(origin = {10, -52.5}, extent = {{7.5, -7.5}, {-7.5, 7.5}}, rotation = 0)));
  ROSPlug.tinyDelay tinyDelay1 annotation(Placement(visible = true, transformation(origin = {190, 75}, extent = {{-2.5, -2.5}, {2.5, 2.5}}, rotation = 0)));
  Modelica.Blocks.Sources.SampleTrigger sampleTrigger1(period = 10) annotation(Placement(visible = true, transformation(origin = {145, 87.391}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.tinyDelay tinyDelay5 annotation(Placement(visible = true, transformation(origin = {215, 22.5}, extent = {{-2.5, -2.5}, {2.5, 2.5}}, rotation = -90)));
  ROSPlug.Publisher publisher2(datatype = "wsm_simulations/QTable", topic = "qtable", msgSitePackageURI = "modelica://wsm_simulations/../../../../devel/lib/site-packages") annotation(Placement(visible = true, transformation(origin = {200, -10}, extent = {{-10, -10}, {10, 10}}, rotation = -270)));
  ROSPlug.Writers.ExternalArrayWriter externalArrayWriter1(path = "data") annotation(Placement(visible = true, transformation(origin = {200, 30}, extent = {{-10, -10}, {10, 10}}, rotation = -270)));
equation
  connect(discountFactor.y, qTable1.discount_factor) annotation(Line(visible = true, origin = {157, -46.667}, points = {{-26, -23.333}, {13, -23.333}, {13, 46.667}}, color = {1, 37, 163}));
  connect(ros_inverted_pendelum_reward_function1.reward, qTable1.reward) annotation(Line(visible = true, origin = {158.333, 40}, points = {{-3.333, 10}, {1.667, 10}, {1.667, -20}}, color = {1, 37, 163}));
  connect(subscriber1.message1, angleReader.messageInConnector1) annotation(Line(visible = true, origin = {-9.475, 35}, points = {{-10.83, -10}, {-0.525, -10}, {-0.525, -10}, {10.16, -10}}, color = {64, 64, 64}));
  connect(subscriber1.message1, angularVelocityReader.messageInConnector1) annotation(Line(visible = true, origin = {-10.765, 27.5}, points = {{-9.54, -2.5}, {0.765, -2.5}, {0.765, 20.777}, {11.45, 20.777}}, color = {64, 64, 64}));
  connect(subscriber1.subscriberPublisherConnector1, rOS_Node1.rosNodeConnector1) annotation(Line(visible = true, origin = {-59.694, 30}, points = {{19.194, -5}, {-0.306, -5}, {-0.306, -25}, {-16.105, -25}}));
  connect(subscriber1.message1, velocityReader.messageInConnector1) annotation(Line(visible = true, origin = {-10.765, 52.5}, points = {{-9.54, -27.5}, {0.765, -27.5}, {0.765, 22.5}, {11.45, 22.5}}, color = {64, 64, 64}));
  connect(publisher1.subscriberPublisherConnector1, rOS_Node1.rosNodeConnector1) annotation(Line(visible = true, origin = {-59.694, 10}, points = {{19.194, -30}, {-0.306, -30}, {-0.306, -5}, {-16.105, -5}}));
  connect(publisher1.message1, motorResponseWriter.messageOutConnector1) annotation(Line(visible = true, origin = {-9.836, -20}, points = {{-10.245, 0}, {10.245, 0}}, color = {64, 64, 64}));
  connect(qTable1.action, motorResponseWriter.y) annotation(Line(visible = true, origin = {139.125, -5}, points = {{36.375, 15}, {41.375, 15}, {41.375, -15}, {-119.125, -15}}, color = {1, 37, 163}));
  connect(tinyDelay2.y, qTable1.trigger) annotation(Line(visible = true, origin = {108.2, 8.4}, points = {{-67.5, 1.8}, {-45.088, 1.8}, {47.8, 1.6}}, color = {255, 0, 255}));
  connect(subscriber1.trigger, tinyDelay2.u) annotation(Line(visible = true, origin = {-3.447, 17.78}, points = {{-16.709, 2.579}, {-6.553, 2.579}, {-6.553, -7.58}, {39.049, -7.58}}, color = {190, 52, 178}));
  connect(tinyDelay3.y, motorResponseWriter.trigger) annotation(Line(visible = true, origin = {48.165, -17.079}, points = {{14.082, 13.841}, {14.082, -6.921}, {-28.165, -6.921}}, color = {255, 0, 255}));
  connect(velocityReader.y, ros_inverted_pendelum_reward_function1.velocity) annotation(Line(visible = true, origin = {62.75, 68}, points = {{-42.75, 7}, {-22.75, 7}, {-22.75, -16.2}, {73.25, -16.2}}, color = {1, 37, 163}));
  connect(angularVelocityReader.y, ros_inverted_pendelum_reward_function1.angularVelocity) annotation(Line(visible = true, origin = {34, 52.5}, points = {{-14, -4.223}, {78.756, -4.223}, {78.756, -4.3}, {102, -4.3}}, color = {1, 37, 163}));
  connect(angleReader.y, ros_inverted_pendelum_reward_function1.angle) annotation(Line(visible = true, origin = {62.75, 37}, points = {{-42.75, -12}, {-22.75, -12}, {-22.75, 7.5}, {73.25, 7.5}}, color = {1, 37, 163}));
  connect(velocityReader.y, qTable1.state[1]) annotation(Line(visible = true, origin = {87.667, 48.665}, points = {{-67.667, 26.335}, {-47.667, 26.335}, {-47.7, 3.134}, {32.359, 3.196}, {32.333, -33.665}, {68.333, -33.665}}, color = {1, 37, 163}));
  connect(angularVelocityReader.y, qTable1.state[2]) annotation(Line(visible = true, origin = {106.711, 33.333}, points = {{-86.711, 14.944}, {3.289, 14.944}, {3.289, 1.667}, {13.289, 1.667}, {13.289, -18.333}, {49.289, -18.333}}, color = {1, 37, 163}));
  connect(angleReader.y, qTable1.state[3]) annotation(Line(visible = true, origin = {92, 28.505}, points = {{-72, -3.505}, {-52, -3.505}, {-52.013, 16.045}, {8.053, 15.988}, {8, -0.104}, {28, -0.104}, {28, -13.505}, {64, -13.505}}, color = {1, 37, 163}));
  connect(subscriber1.message1, positionReader.messageInConnector1) annotation(Line(visible = true, origin = {-9.905, 62.5}, points = {{-10.4, -37.5}, {-0.095, -37.5}, {-0.095, 37.5}, {10.59, 37.5}}, color = {64, 64, 64}));
  connect(positionReader.y, ros_inverted_pendelum_reward_function1.position) annotation(Line(visible = true, origin = {60.948, 77.75}, points = {{-40.948, 22.25}, {-15.948, 22.25}, {-15.948, -22.25}, {75.052, -22.25}}, color = {1, 37, 163}));
  connect(switch1.u1, learningRate.y) annotation(Line(visible = true, origin = {138.5, -40.5}, points = {{5.5, -0.5}, {1.5, -0.5}, {1.5, 0.5}, {-7.5, 0.5}}, color = {1, 37, 163}));
  connect(epsilon.y, switch2.u1) annotation(Line(visible = true, origin = {137.126, -55.5}, points = {{-6.126, 0.5}, {2.874, 0.5}, {2.874, -0.5}, {6.874, -0.5}}, color = {1, 37, 163}));
  connect(notTrainingValue.y, switch1.u3) annotation(Line(visible = true, origin = {137.964, -39.25}, points = {{-12.514, 13.75}, {-2.964, 13.75}, {-2.964, -9.75}, {6.036, -9.75}}, color = {1, 37, 163}));
  connect(notTrainingValue.y, switch2.u3) annotation(Line(visible = true, origin = {135.862, -46.75}, points = {{-10.412, 21.25}, {-0.862, 21.25}, {-0.862, -17.25}, {8.138, -17.25}}, color = {1, 37, 163}));
  connect(qTable1.epsilon, switch2.y) annotation(Line(visible = true, origin = {161.833, -40}, points = {{3.167, 40}, {3.167, -20}, {-6.333, -20}}, color = {1, 37, 163}));
  connect(switch1.y, qTable1.learning_rate) annotation(Line(visible = true, origin = {158.5, -30}, points = {{-3, -15}, {1.5, -15}, {1.5, 30}}, color = {1, 37, 163}));
  connect(booleanExpression1.y, switch2.u2) annotation(Line(visible = true, origin = {113.126, -54.142}, points = {{-22.126, -5.858}, {-8.126, -5.858}, {-8.126, -5.858}, {30.874, -5.858}}, color = {255, 0, 255}));
  connect(booleanExpression1.y, switch1.u2) annotation(Line(visible = true, origin = {112.5, -52.5}, points = {{-21.5, -7.5}, {-7.5, -7.5}, {-7.5, 7.5}, {31.5, 7.5}}, color = {255, 0, 255}));
  connect(tinyDelay3.y, tinyDelay4.u) annotation(Line(visible = true, origin = {54.616, -41.057}, points = {{7.631, 37.819}, {7.631, -18.91}, {-15.262, -18.91}}, color = {255, 0, 255}));
  connect(variableTimeDelay1.delayTime, timeDelay.y) annotation(Line(visible = true, origin = {33.53, -46.25}, points = {{-15.97, -6.25}, {-8.53, -6.25}, {-8.53, 6.25}, {35.47, 6.25}}, color = {1, 37, 163}));
  connect(variableTimeDelay1.trigger, tinyDelay4.y) annotation(Line(visible = true, origin = {21.075, -45.253}, points = {{-4.18, -10.668}, {3.925, -14.747}, {7.092, -14.747}, {7.092, -14.73}, {12.813, -14.714}}, color = {190, 52, 178}));
  connect(sampleTrigger1.y, tinyDelay1.u) annotation(Line(visible = true, origin = {133.607, 92.6}, points = {{22.393, -5.209}, {39.765, -5.209}, {39.765, -17.4}, {54.495, -17.4}}, color = {255, 0, 255}));
  connect(sampleTrigger1.y, qTable1.getDataTrigger) annotation(Line(visible = true, origin = {153.858, 65.883}, points = {{2.142, 21.508}, {19.565, 21.508}, {19.565, -42.471}, {16.142, -44.71}}, color = {255, 0, 255}));
  connect(tinyDelay1.y, tinyDelay5.u) annotation(Line(visible = true, origin = {207.867, 58.266}, points = {{-14.667, 16.934}, {7.333, 16.934}, {7.333, -33.868}}, color = {255, 0, 255}));
  connect(publisher2.subscriberPublisherConnector1, rOS_Node1.rosNodeConnector1) annotation(Line(visible = true, origin = {78.008, 11.105}, points = {{121.992, -31.605}, {121.992, -89.572}, {-138.008, -89.572}, {-138.008, -6.105}, {-153.807, -6.105}}));
  connect(tinyDelay5.y, publisher2.trigger) annotation(Line(visible = true, origin = {210.1, 11.936}, points = {{5.1, 7.364}, {5.1, 2.364}, {-5.1, 2.364}, {-5.1, -12.091}}, color = {255, 0, 255}));
  connect(variableTimeDelay1.y, publisher1.trigger) annotation(Line(visible = true, origin = {-10.329, -38.75}, points = {{12.665, -13.75}, {-1.419, -13.75}, {-1.419, 13.75}, {-9.826, 13.75}}, color = {255, 0, 255}));
  connect(qTable1.eaConnector, externalArrayWriter1.external_array) annotation(Line(visible = true, origin = {183.706, 40.624}, points = {{-16.294, -20.212}, {-16.294, 9.376}, {16.294, 9.376}, {16.294, -0.527}}, color = {128, 128, 128}));
  connect(externalArrayWriter1.messageOutConnector1, publisher2.message1) annotation(Line(visible = true, origin = {200, 10.164}, points = {{0, 10.246}, {0, -10.246}}, color = {64, 64, 64}));
  connect(tinyDelay1.y, externalArrayWriter1.trigger) annotation(Line(visible = true, origin = {200.4, 63.467}, points = {{-7.2, 11.733}, {3.6, 11.733}, {3.6, -23.467}}, color = {255, 0, 255}));
  connect(tinyDelay2.y, tinyDelay3.u) annotation(Line(visible = true, origin = {55.065, 7.453}, points = {{-14.365, 2.747}, {7.182, 2.747}, {7.182, -5.493}}, color = {255, 0, 255}));
  annotation(Diagram(coordinateSystem(extent = {{-100, -85}, {225, 120}}, preserveAspectRatio = true, initialScale = 0.1, grid = {5, 5})), Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10}), graphics = {Text(visible = true, textColor = {64, 64, 64}, extent = {{-150, 110}, {150, 150}}, textString = "%name"), Rectangle(visible = true, lineColor = {191, 191, 191}, fillColor = {255, 255, 255}, fillPattern = FillPattern.HorizontalCylinder, lineThickness = 4, extent = {{-90, -90}, {90, 90}}, radius = 25), Rectangle(visible = true, origin = {-4.648, 24.511}, rotation = 5, lineColor = {0, 67, 109}, fillColor = {169, 0, 0}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, lineThickness = 0, extent = {{-4.67, -48.292}, {4.67, 48.292}}), Rectangle(visible = true, origin = {0, -50}, fillColor = {169, 0, 0}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, lineThickness = 0, extent = {{-40, -20}, {40, 20}}), Ellipse(visible = true, origin = {-0.397, -25}, fillColor = {169, 0, 0}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-5, -5}, {5, 5}}), Rectangle(visible = true, origin = {-47.006, 35.183}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {-47.006, 20.016}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {-47.006, 4.785}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {0, 35.215}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {0, 20.048}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {0, 4.817}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {46.497, 35.215}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {46.497, 20.048}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {46.497, 4.817}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}})}));
end ros_inverted_pendelum_controller;
