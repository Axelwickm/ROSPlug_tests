within wsm_simulations;

model ros_inverted_pendelum_controller
  ros_inverted_pendelum_reward_function ros_inverted_pendelum_reward_function1 annotation(Placement(visible = true, transformation(origin = {142.791, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  QTableSetting settingVelocity(minimum = -2, maximum = 2, count = 9) annotation(Placement(visible = true, transformation(origin = {105.796, 7.615}, extent = {{-4.204, -4.204}, {4.204, 4.204}}, rotation = 0)));
  QTableSetting settingAngularVelocity(minimum = -15, maximum = 15, count = 15) annotation(Placement(visible = true, transformation(origin = {105.796, -2.385}, extent = {{-4.204, -4.204}, {4.204, 4.204}}, rotation = 0)));
  QTableSetting settingAngle(count = 15, minimum = -3.1416, maximum = 3.1416) annotation(Placement(visible = true, transformation(origin = {105.796, -12.385}, extent = {{-4.204, -4.204}, {4.204, 4.204}}, rotation = 0)));
  QTableSetting settingActionMotorResponse(minimum = -12, maximum = 12, count = 14) annotation(Placement(visible = true, transformation(origin = {139.872, -10.128}, extent = {{-4.872, -4.872}, {4.872, 4.872}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression learningRate(y = 0.1) annotation(Placement(visible = true, transformation(origin = {120, -35}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression epsilon(y = (1.0 - time / 200000) * 0.05) annotation(Placement(visible = true, transformation(origin = {120, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression discountFactor(y = 0.5) annotation(Placement(visible = true, transformation(origin = {120, -65}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  QTable qTable1(stateDims = 3, saveModel = saveModel, useResetPort = false, loadModel = loadModel, modelURI = "modelica://wsm_simulations/../../pendelum_controller.qtable", savingInterval = savingInterval) annotation(Placement(visible = true, transformation(origin = {165, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.ROS_Node rOS_Node1(node_name = "inverted_pendelum_controller") annotation(Placement(visible = true, transformation(origin = {-85, 10}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Readers.RealReader velocityReader(path = "velocity") annotation(Placement(visible = true, transformation(origin = {10, 75}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Readers.RealReader angleReader(path = "angle") annotation(Placement(visible = true, transformation(origin = {10, 25}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Readers.RealReader angularVelocityReader(path = "angular_velocity") annotation(Placement(visible = true, transformation(origin = {10, 48.277}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Subscriber subscriber1(topic = "pendelum_state") annotation(Placement(visible = true, transformation(origin = {-30, 25}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Publisher publisher1(topic = "pendelum_motor", msgSitePackageURI = "modelica://wsm_simulations/../../../../devel/lib/site-packages", datatype = "wsm_simulations/PendelumMotor", internalMessagingPolicy = internalMessagingPolicy) annotation(Placement(visible = true, transformation(origin = {-30, -20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Writers.RealWriter motorResponseWriter(path = "motor_response") annotation(Placement(visible = true, transformation(origin = {10, -20}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.tinyDelay tinyDelay2 annotation(Placement(visible = true, transformation(origin = {37.5, -2.5}, extent = {{-2.5, -2.5}, {2.5, 2.5}}, rotation = 0)));
  ROSPlug.tinyDelay tinyDelay3 annotation(Placement(visible = true, transformation(origin = {62.451, -10}, extent = {{2.549, -2.549}, {-2.549, 2.549}}, rotation = -270)));
  parameter Boolean training = false "If training should be applied";
  parameter Boolean loadModel = true "qTable1.loadModel";
  parameter Boolean saveModel = false "qTable1.saveModel";
  parameter ROSPlug.Publisher.InternalMessagingPolicy internalMessagingPolicy = ROSPlug.Publisher.InternalMessagingPolicy.Prohibited "If message are sent directly to subscribers within the model without passing through ROS. (publisher1.internalMessagingPolicy)";
  parameter Modelica.SIunits.Time savingInterval(min = 0) = 86000 "How often to save (qTable1.savingInterval)";
  ROSPlug.Readers.RealReader positionReader(path = "position") annotation(Placement(visible = true, transformation(origin = {10, 100}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.Writers.RealWriter qvalueWriter(path = "qvalue") annotation(Placement(visible = true, transformation(origin = {10, -75}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Logical.Switch switch1 annotation(Placement(visible = true, transformation(origin = {150, -40}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
  Modelica.Blocks.Logical.Switch switch2 annotation(Placement(visible = true, transformation(origin = {150, -55}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression notTrainingValue(y = 0) annotation(Placement(visible = true, transformation(origin = {135, -25.5}, extent = {{-4.5, -4.5}, {4.5, 4.5}}, rotation = -90)));
  Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y = training) annotation(Placement(visible = true, transformation(origin = {80, -85}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  ROSPlug.tinyDelay tinyDelay4 annotation(Placement(visible = true, transformation(origin = {35, -47.319}, extent = {{2.681, -2.681}, {-2.681, 2.681}}, rotation = 0)));
  Modelica.Blocks.Sources.RealExpression timeDelay(y = if internalMessagingPolicy == ROSPlug.Publisher.InternalMessagingPolicy.Only then 0.02 else 0) annotation(Placement(visible = true, transformation(origin = {80, -40}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
  ROSPlug.variableTimeDelay variableTimeDelay1 annotation(Placement(visible = true, transformation(origin = {7.5, -40}, extent = {{7.5, -7.5}, {-7.5, 7.5}}, rotation = 0)));
equation
  connect(discountFactor.y, qTable1.discount_factor) annotation(Line(visible = true, origin = {159, -43.333}, points = {{-28, -21.667}, {14, -21.667}, {14, 43.333}}, color = {1, 37, 163}));
  connect(settingActionMotorResponse.settingConnector1, qTable1.actionSettingConnector1) annotation(Line(visible = true, origin = {154.563, -7.516}, points = {{-10.873, -3.758}, {5.437, -3.758}, {5.437, 7.516}}, color = {0, 128, 128}));
  connect(settingAngularVelocity.settingConnector1, qTable1.stateSettingConnector1[2]) annotation(Line(visible = true, origin = {133.375, -1.687}, points = {{-24.284, -1.687}, {-3.375, -1.687}, {-3.375, 1.687}, {22.625, 1.687}}, color = {0, 128, 128}));
  connect(settingVelocity.settingConnector1, qTable1.stateSettingConnector1[1]) annotation(Line(visible = true, origin = {133.375, 3.313}, points = {{-24.284, 3.313}, {-3.375, 3.313}, {-3.375, -3.313}, {22.625, -3.313}}, color = {0, 128, 128}));
  connect(settingAngle.settingConnector1, qTable1.stateSettingConnector1[3]) annotation(Line(visible = true, origin = {133.375, -6.687}, points = {{-24.284, -6.687}, {-3.375, -6.687}, {-3.375, 6.687}, {22.625, 6.687}}, color = {0, 128, 128}));
  connect(ros_inverted_pendelum_reward_function1.reward, qTable1.reward) annotation(Line(visible = true, origin = {160.93, 40}, points = {{-8.139, 10}, {4.07, 10}, {4.07, -20}}, color = {1, 37, 163}));
  connect(subscriber1.message1, angleReader.messageInConnector1) annotation(Line(visible = true, origin = {-9.475, 35}, points = {{-10.83, -10}, {-0.525, -10}, {-0.525, -10}, {10.16, -10}}, color = {64, 64, 64}));
  connect(subscriber1.message1, angularVelocityReader.messageInConnector1) annotation(Line(visible = true, origin = {-10.765, 27.5}, points = {{-9.54, -2.5}, {0.765, -2.5}, {0.765, 20.777}, {11.45, 20.777}}, color = {64, 64, 64}));
  connect(subscriber1.subscriberPublisherConnector1, rOS_Node1.rosNodeConnector1) annotation(Line(visible = true, origin = {-59.694, 30}, points = {{19.194, -5}, {-0.306, -5}, {-0.306, -20}, {-16.105, -20}}));
  connect(subscriber1.message1, velocityReader.messageInConnector1) annotation(Line(visible = true, origin = {-10.765, 52.5}, points = {{-9.54, -27.5}, {0.765, -27.5}, {0.765, 22.5}, {11.45, 22.5}}, color = {64, 64, 64}));
  connect(publisher1.subscriberPublisherConnector1, rOS_Node1.rosNodeConnector1) annotation(Line(visible = true, origin = {-59.694, 10}, points = {{19.194, -30}, {-0.306, -30}, {-0.306, 0}, {-16.105, 0}}));
  connect(publisher1.message1, motorResponseWriter.messageOutConnector1) annotation(Line(visible = true, origin = {-9.836, -20}, points = {{-10.245, 0}, {10.245, 0}}, color = {64, 64, 64}));
  connect(qTable1.action, motorResponseWriter.y) annotation(Line(visible = true, origin = {139.125, -4}, points = {{36.375, 16}, {41.375, 16}, {41.375, -16}, {-119.125, -16}}, color = {1, 37, 163}));
  connect(tinyDelay2.y, qTable1.trigger) annotation(Line(visible = true, origin = {108.2, 8.4}, points = {{-67.5, -10.7}, {-9.871, -10.7}, {-9.871, 6.6}, {3.509, 6.6}, {3.509, 1.6}, {47.8, 1.6}}, color = {255, 0, 255}));
  connect(subscriber1.trigger, tinyDelay2.u) annotation(Line(visible = true, origin = {-3.447, 17.78}, points = {{-16.709, 2.579}, {-6.553, 2.579}, {-6.553, -20.08}, {39.049, -20.08}}, color = {190, 52, 178}));
  connect(tinyDelay3.y, motorResponseWriter.trigger) annotation(Line(visible = true, origin = {48.165, -20.421}, points = {{14.082, 7.158}, {14.082, -3.579}, {-28.165, -3.579}}, color = {255, 0, 255}));
  connect(velocityReader.y, ros_inverted_pendelum_reward_function1.velocity) annotation(Line(visible = true, origin = {62.75, 68}, points = {{-42.75, 7}, {-22.75, 7}, {-22.75, -16.2}, {71.041, -16.2}}, color = {1, 37, 163}));
  connect(angularVelocityReader.y, ros_inverted_pendelum_reward_function1.angularVelocity) annotation(Line(visible = true, origin = {34, 52.5}, points = {{-14, -4.223}, {78.756, -4.223}, {78.756, -4.3}, {99.791, -4.3}}, color = {1, 37, 163}));
  connect(angleReader.y, ros_inverted_pendelum_reward_function1.angle) annotation(Line(visible = true, origin = {62.75, 37}, points = {{-42.75, -12}, {-22.75, -12}, {-22.75, 7.5}, {71.041, 7.5}}, color = {1, 37, 163}));
  connect(tinyDelay2.y, tinyDelay3.u) annotation(Line(visible = true, origin = {55.065, -4.221}, points = {{-14.365, 1.921}, {7.182, 1.921}, {7.182, -3.843}}, color = {255, 0, 255}));
  connect(velocityReader.y, qTable1.state[1]) annotation(Line(visible = true, origin = {87.667, 48.665}, points = {{-67.667, 26.335}, {-47.667, 26.335}, {-47.7, 3.134}, {32.359, 3.196}, {32.333, -33.665}, {68.333, -33.665}}, color = {1, 37, 163}));
  connect(angularVelocityReader.y, qTable1.state[2]) annotation(Line(visible = true, origin = {106.711, 33.333}, points = {{-86.711, 14.944}, {3.289, 14.944}, {3.289, 1.667}, {13.289, 1.667}, {13.289, -18.333}, {49.289, -18.333}}, color = {1, 37, 163}));
  connect(angleReader.y, qTable1.state[3]) annotation(Line(visible = true, origin = {92, 28.505}, points = {{-72, -3.505}, {-52, -3.505}, {-52.013, 16.045}, {8.053, 15.988}, {8, -0.104}, {28, -0.104}, {28, -13.505}, {64, -13.505}}, color = {1, 37, 163}));
  connect(subscriber1.message1, positionReader.messageInConnector1) annotation(Line(visible = true, origin = {-9.905, 62.5}, points = {{-10.4, -37.5}, {-0.095, -37.5}, {-0.095, 37.5}, {10.59, 37.5}}, color = {64, 64, 64}));
  connect(positionReader.y, ros_inverted_pendelum_reward_function1.position) annotation(Line(visible = true, origin = {60.948, 77.75}, points = {{-40.948, 22.25}, {-15.948, 22.25}, {-15.948, -22.25}, {72.843, -22.25}}, color = {1, 37, 163}));
  connect(qTable1.qvalue, qvalueWriter.y) annotation(Line(visible = true, origin = {140.193, -46}, points = {{35.192, 49}, {43.129, 49}, {43.129, -29}, {-120.193, -29}}, color = {1, 37, 163}));
  connect(tinyDelay3.y, qvalueWriter.trigger) annotation(Line(visible = true, origin = {48.165, -57.088}, points = {{14.082, 43.825}, {14.082, -21.912}, {-28.165, -21.912}}, color = {255, 0, 255}));
  connect(qvalueWriter.messageOutConnector1, publisher1.message1) annotation(Line(visible = true, origin = {-7.418, -47.5}, points = {{7.828, -27.5}, {-2.582, -27.5}, {-2.582, 27.5}, {-12.663, 27.5}}, color = {64, 64, 64}));
  connect(switch1.u1, learningRate.y) annotation(Line(visible = true, origin = {138.5, -35.5}, points = {{5.5, -0.5}, {1.5, -0.5}, {1.5, 0.5}, {-7.5, 0.5}}, color = {1, 37, 163}));
  connect(epsilon.y, switch2.u1) annotation(Line(visible = true, origin = {137.126, -50.5}, points = {{-6.126, 0.5}, {2.874, 0.5}, {2.874, -0.5}, {6.874, -0.5}}, color = {1, 37, 163}));
  connect(notTrainingValue.y, switch1.u3) annotation(Line(visible = true, origin = {137.964, -34.25}, points = {{-2.964, 3.8}, {-2.964, 3.8}, {-2.964, -9.75}, {6.036, -9.75}}, color = {1, 37, 163}));
  connect(notTrainingValue.y, switch2.u3) annotation(Line(visible = true, origin = {135.862, -41.75}, points = {{-0.862, 11.3}, {-0.862, 11.3}, {-0.862, -17.25}, {8.138, -17.25}}, color = {1, 37, 163}));
  connect(qTable1.epsilon, switch2.y) annotation(Line(visible = true, origin = {164.167, -36.667}, points = {{4.333, 36.667}, {4.333, -18.333}, {-8.667, -18.333}}, color = {1, 37, 163}));
  connect(switch1.y, qTable1.learning_rate) annotation(Line(visible = true, origin = {161.167, -26.667}, points = {{-5.667, -13.333}, {2.833, -13.333}, {2.833, 26.667}}, color = {1, 37, 163}));
  connect(booleanExpression1.y, switch2.u2) annotation(Line(visible = true, origin = {113.126, -49.142}, points = {{-22.126, -35.858}, {-8.126, -35.858}, {-8.126, -5.858}, {30.874, -5.858}}, color = {255, 0, 255}));
  connect(booleanExpression1.y, switch1.u2) annotation(Line(visible = true, origin = {112.5, -47.5}, points = {{-21.5, -37.5}, {-7.5, -37.5}, {-7.5, 7.5}, {31.5, 7.5}}, color = {255, 0, 255}));
  connect(tinyDelay3.y, tinyDelay4.u) annotation(Line(visible = true, origin = {53.843, -35.824}, points = {{8.404, 22.562}, {8.404, -11.281}, {-16.808, -11.281}}, color = {255, 0, 255}));
  connect(variableTimeDelay1.delayTime, timeDelay.y) annotation(Line(visible = true, origin = {42.03, -40}, points = {{-26.97, 0}, {26.97, 0}}, color = {1, 37, 163}));
  connect(variableTimeDelay1.y, publisher1.trigger) annotation(Line(visible = true, origin = {-11.347, -32.5}, points = {{11.183, -7.5}, {-3.653, -7.5}, {-3.653, 7.5}, {-8.808, 7.5}}, color = {255, 0, 255}));
  connect(variableTimeDelay1.trigger, tinyDelay4.y) annotation(Line(visible = true, origin = {21.075, -45.253}, points = {{-6.68, 1.832}, {-6.415, 1.868}, {-1.075, -1.852}, {10.494, -1.852}}, color = {190, 52, 178}));
  annotation(Diagram(coordinateSystem(extent = {{-100, -105}, {195, 115}}, preserveAspectRatio = true, initialScale = 0.1, grid = {5, 5}), graphics = {Text(visible = true, origin = {20.465, -56.578}, extent = {{-20.465, -8.422}, {20.465, 8.422}}, textString = "For visualization script:", textStyle = {TextStyle.Bold})}), Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}, preserveAspectRatio = true, initialScale = 0.1, grid = {10, 10}), graphics = {Text(visible = true, textColor = {64, 64, 64}, extent = {{-150, 110}, {150, 150}}, textString = "%name"), Rectangle(visible = true, lineColor = {191, 191, 191}, fillColor = {255, 255, 255}, fillPattern = FillPattern.HorizontalCylinder, lineThickness = 4, extent = {{-90, -90}, {90, 90}}, radius = 25), Rectangle(visible = true, origin = {-4.648, 24.511}, rotation = 5, lineColor = {0, 67, 109}, fillColor = {169, 0, 0}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, lineThickness = 0, extent = {{-4.67, -48.292}, {4.67, 48.292}}), Rectangle(visible = true, origin = {0, -50}, fillColor = {169, 0, 0}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, lineThickness = 0, extent = {{-40, -20}, {40, 20}}), Ellipse(visible = true, origin = {-0.397, -25}, fillColor = {169, 0, 0}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-5, -5}, {5, 5}}), Rectangle(visible = true, origin = {-47.006, 35.183}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {-47.006, 20.016}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {-47.006, 4.785}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {0, 35.215}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {0, 20.048}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {0, 4.817}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {46.497, 35.215}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {46.497, 20.048}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}}), Rectangle(visible = true, origin = {46.497, 4.817}, lineColor = {128, 128, 128}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Sphere, extent = {{-23.503, -7.495}, {23.503, 7.495}})}));
end ros_inverted_pendelum_controller;
